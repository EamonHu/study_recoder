# 指定RootLogger 顶级父元素默认配置信息

# 指定日志级别,使用appender为console
log4j.rootLogger = trace, logDB

# 自定义Logger对象设置
log4j.logger.com.bupt = info, file


# 指定控制台日志输出的appender
log4j.appender.console = org.apache.log4j.ConsoleAppender
# 指定消息格式
#log4j.appender.console.layout = org.apache.log4j.SimpleLayout
log4j.appender.console.layout = org.apache.log4j.PatternLayout

# 指定消息格式的内容
log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x -%m%n



# 指定控制台日志输出的appender对象
log4j.appender.file = org.apache.log4j.FileAppender
# 指定消息格式
#log4j.appender.console.layout = org.apache.log4j.SimpleLayout
log4j.appender.file.layout = org.apache.log4j.PatternLayout
# 指定消息格式的内容
log4j.appender.file.layout.conversionPattern = %r [%t] %p %c %x -%m%n
# 指定日志文件的保存路径
log4j.appender.file.file = log4j.log
# 指定日志文件的字符集
log4j.appender.file.encoding = UTF-8


# 按照文件大小拆分的appender对象
# 指定控制台日志输出的appender对象
log4j.appender.rollingFile = org.apache.log4j.RollingFileAppender
# 指定消息格式
#log4j.appender.console.layout = org.apache.log4j.SimpleLayout
log4j.appender.rollingFile.layout = org.apache.log4j.PatternLayout
# 指定消息格式的内容
log4j.appender.rollingFile.layout.conversionPattern = %r [%t] %p %c %x -%m%n
# 指定日志文件的保存路径
log4j.appender.rollingFile.file = log4j.log
# 指定日志文件的字符集
log4j.appender.rollingFile.encoding = UTF-8
# 指定文件内容大小
log4j.appender.rollingFile.maxFileSize = 1MB
# 指定日志文件的数量
log4j.appender.rollingFile.maxBackupIndex = 3


# 按照时间规则拆分的appender对象
# 指定控制台日志输出的appender对象
log4j.appender.dailyFile = org.apache.log4j.DailyRollingFileAppender
# 指定消息格式
#log4j.appender.console.layout = org.apache.log4j.SimpleLayout
log4j.appender.dailyFile.layout = org.apache.log4j.PatternLayout
# 指定消息格式的内容
log4j.appender.dailyFile.layout.conversionPattern = %r [%t] %p %c %x -%m%n
# 指定日志文件的保存路径
log4j.appender.dailyFile.file = log4j.log
# 指定日志文件的字符集
log4j.appender.dailyFile.encoding = UTF-8
# 指定日期拆分的规则
log4j.appender.dailyFile.datePattern = '.'yyyy-mm-dd-HH-mm-ss


# mysql
log4j.appender.logDB = org.apache.log4j.jdbc.JDBCAppender
log4j.appender.logDB.layout=org.apache.log4j.PatternLayout
log4j.appender.logDB.Driver=com.mysql.jdbc.Driver
log4j.appender.logDB.URL=jdbc:mysql://localhost:3306/test
log4j.appender.logDB.User=root
log4j.appender.logDB.Password=24862486
log4j.appender.logDB.Sql=INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values('bupt','%d{yyyy-mm-dd HH:mm:ss}', '%p','%c','%F','%t','%L','%l','%m')


# c category的名称，可使用｛n}限制输出的精度。例如：logger名为"a.b.c"，%c{2}将输出"b.c"。

# C 产生log事件的java完全限定类名。可使用｛n}限制输出的精度。例如：“org.apache.xyz.SomeClass”,%C{2}将输出“SomeClass”。

# d 时间和日期的输出格式，例如：%d{yyyy MM dd HH:mm:ss,SS}，可不带后面的日期格式字符。

# F 产生log事件的java源文件名，带“.java”后缀及包名称。

# l log发生位置的详细描述，包括方法名、文件名及行号。

# L log发生在源文件中的位置。

# m log事件的消息内容。

# M log发生时所在的方法名称。

# n 根据所运行的平台输出相应的行分隔字符。

# p log事件的级别。

# r 自程序运行至log事件产生所经过的时间。

# t 产生log的线程名称。